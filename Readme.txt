###############################################################################
What is inside this project?
###############################################################################

Examples of C# / specflow tests for:
	- Browser / UI testing  (using Selenium)
	- Android testing (using Appium)
	- API testing (using RestSharp library)

###############################################################################
What is needed to run the tests?
###############################################################################

Building/Compiling:
- Microsoft Visual Studio 2017 (Community version should work fine)
- Visual studio extensions:
	NUnit 3 Test Adapter   (to run NUnit tests inside visual studio)
	SlowCheetah (If you plan to create tests for multiple configurations / environments)
	SpecFlow for Visual Studion 2017 (witing tests in Gherking language)
	
Appium (Android):
- Android SDK (for creating and running emulator)
- Appium (to communicate with device/emulator)

Selenium:
- no additional programs are needed (drivers are downloaded when starting tests)

API
- no additional packages are needed

###############################################################################
How to install ?
###############################################################################

Android SDK:
1. Download and Install Android Studio
2. Set ANDROID_HOME environment variable and point to the folder with SDK (example: ANDROID_HOME=C:\Users\gjarosz\AppData\Local\Android\android-sdk)
3. Open new cmd window and execute "adb version" to see if android tools are working

Create new emulator image:
1. Go to the project folder
2. Open "CreateEmulator.bat" in a editor
3. Find the following line:
	echo no | cmd /c %ANDROID_HOME%\tools\bin\avdmanager -s create avd --force --name AppiumExample --abi google_apis/x86_64 --package "system-images;android-23;google_apis;x86_64" > nul
4. Fix/adjust entries architecture (x86_64, x86) and API level (android-23 for Marshmallow, android-24 for Nougat 7.0, android-25 for Nougat 7.1)
	to match emulator image installed on your system 
5. Save the file and run the script
6. New emulator with a name "AppiumExample" should be created (and selendroid test app will be installed there)
7. In case of problems try running each command from the "CreateEmulator.bat" script manualy removing "> nul" to find out what is not working.

Appium
1. Install node.js
2. Run "npm install -g appium"
3. Run "appium" after install to see if appium server starts corectly (use Ctrl+C to exit appium)

Appium - dekstop (usefull for test development, not needed to run the tests)
1. Go to the "https://github.com/appium/appium-desktop/releases/" and download the newest installer
2. Install the app

Troubleshooting:
Use Google/StackOverflow to fix the issues not described here.

###############################################################################
Runnig the tests
###############################################################################

Visual Studio:
1. Open and build the project
2. Open Test Explorer (Test->Windows->Test Explorer)
3. Use second button from the left to change sorting / grouping
	for example setting to "Traits" sorts Specflow tests by added TAGS

Commandline:
1. Go to the project folder
2. Run one of the "RunTestsWith.." batch files.
	Each of these files runs the tests marked with some tags
	for example: 
	"RunTestsWithRegressionTag.Bat" runs all tests marked inside feature files with @Regression tag
	"RunTestsWithAPITag.Bat" runs all tests marked inside feature files with @API
	the same is true for UI (runs tests in web browser) and AVD (runs appium tests in android emulator)
3. Test results and step definition report (showing usage od defined steps) are stored inside \TestResults folder

###############################################################################
What is Where ? Folders structure
###############################################################################
[Project Folder]
 |
 |- Extensions			- contains classess with extension metods - additional methods for IWebElements are added here
 |- Features			- stores feature files (and C# generated by Specflow)
 |- Locators			- stores resx files with element locators (these open in visual studio as a nice key-value table)
 |- Models				- stores simple data transfer classes for API testing
 |- Pages				- page objects for web testing are there
 |- Screens				- screen objects for android testing are there
 |- TestContext			- stores context classes for storing information between test steps
 |- TestFiles			- contains various files used during tests (these are copied to bin\Debug folders) - selendroid test apk is stored there
 |- TestResults			- stores test reports when running tests from commandline
 |- TestSteps			- contains step definitions, currently divided by purpose: setup, api, android and browser steps are there
 |- Utilities			- other utility type classes, curretly helper classes to initialize selenium and appium drivers are there
 |- App.config			- Test Settings are stored here !!!
 |- RunTestWith...		- batch files for runing tests marked inside feature file with various tags
 |- SpecflowTests.nunit	- stores configuration for nunit, additional configs can be added there to support runing tests on different browsers / environments