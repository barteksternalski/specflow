// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.2.0.0
//      SpecFlow Generator Version:2.2.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Infusion.Specflow.Tests.Template.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Getting information about xkcd comic (API example)")]
    [NUnit.Framework.CategoryAttribute("API")]
    [NUnit.Framework.CategoryAttribute("Regression")]
    public partial class GettingInformationAboutXkcdComicAPIExampleFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "XkcdComicDetails.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Getting information about xkcd comic (API example)", null, ProgrammingLanguage.CSharp, new string[] {
                        "API",
                        "Regression"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Sending request GET with wrong id of a comic returns error")]
        [NUnit.Framework.TestCaseAttribute("abc", "404", null)]
        [NUnit.Framework.TestCaseAttribute("9999999999", "404", null)]
        public virtual void SendingRequestGETWithWrongIdOfAComicReturnsError(string comicId, string responseCode, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Sending request GET with wrong id of a comic returns error", exampleTags);
#line 4
this.ScenarioSetup(scenarioInfo);
#line 5
 testRunner.Given(string.Format("I send the GET request to the \"{0}/info.0.json\"", comicId), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 6
 testRunner.Then(string.Format("I receive the response with response code: \"{0}\"", responseCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Sending request GET with id of a comic returns comic description (single scenario" +
            ")")]
        public virtual void SendingRequestGETWithIdOfAComicReturnsComicDescriptionSingleScenario()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Sending request GET with id of a comic returns comic description (single scenario" +
                    ")", ((string[])(null)));
#line 13
this.ScenarioSetup(scenarioInfo);
#line 14
 testRunner.Given("I send the GET request to the \"1459/info.0.json\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 15
 testRunner.When("I receive the response with response code: \"200\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "day",
                        "month",
                        "num",
                        "link",
                        "year",
                        "news",
                        "title"});
            table1.AddRow(new string[] {
                        "12",
                        "12",
                        "1459",
                        "",
                        "2014",
                        "",
                        "Documents"});
#line 16
 testRunner.Then("response contains comic details:", ((string)(null)), table1, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Sending request GET with id of a comic returns comic description (multiple execut" +
            "ions with different test data)")]
        [NUnit.Framework.TestCaseAttribute("1459", "12", "12", "", "2014", "", "Documents", null)]
        [NUnit.Framework.TestCaseAttribute("14", "1", "1", "", "2006", "", "Copyright", null)]
        public virtual void SendingRequestGETWithIdOfAComicReturnsComicDescriptionMultipleExecutionsWithDifferentTestData(string comicId, string day, string month, string link, string year, string news, string title, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Sending request GET with id of a comic returns comic description (multiple execut" +
                    "ions with different test data)", exampleTags);
#line 21
this.ScenarioSetup(scenarioInfo);
#line 22
 testRunner.Given(string.Format("I send the GET request to the \"{0}/info.0.json\"", comicId), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 23
 testRunner.When("I receive the response with response code: \"200\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "day",
                        "month",
                        "num",
                        "link",
                        "year",
                        "news",
                        "title"});
            table2.AddRow(new string[] {
                        string.Format("{0}", day),
                        string.Format("{0}", month),
                        string.Format("{0}", comicId),
                        string.Format("{0}", link),
                        string.Format("{0}", year),
                        "",
                        string.Format("{0}", title)});
#line 24
 testRunner.Then("response contains comic details:", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
