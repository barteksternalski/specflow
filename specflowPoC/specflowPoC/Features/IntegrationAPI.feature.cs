// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.2.0.0
//      SpecFlow Generator Version:2.2.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace specflowPoC.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("API integration")]
    public partial class APIIntegrationFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "IntegrationAPI.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "API integration", "  As a User I want to verify API calculations", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("01. Verify simple user Flow Induced Excitation calculation")]
        [NUnit.Framework.TestCaseAttribute("1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", null)]
        public virtual void _01_VerifySimpleUserFlowInducedExcitationCalculation(string insDiam, string len, string waterFR, string gasFR, string oilFR, string waterDen, string gasDen, string oilDen, string branchID, string gasVis, string soundSpeed, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("01. Verify simple user Flow Induced Excitation calculation", exampleTags);
#line 4
 this.ScenarioSetup(scenarioInfo);
#line 5
  testRunner.Given("Application API is up and running", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "insideDiameter",
                        "length",
                        "waterFlowRate",
                        "gasFlowRate",
                        "oilFlowRate",
                        "waterDensity",
                        "gasDensity",
                        "oilDensity",
                        "mainBranchID",
                        "gasViscosity",
                        "speedOfSound"});
            table1.AddRow(new string[] {
                        string.Format("{0}", insDiam),
                        string.Format("{0}", len),
                        string.Format("{0}", waterFR),
                        string.Format("{0}", gasFR),
                        string.Format("{0}", oilFR),
                        string.Format("{0}", waterDen),
                        string.Format("{0}", gasDen),
                        string.Format("{0}", oilDen),
                        string.Format("{0}", branchID),
                        string.Format("{0}", gasVis),
                        string.Format("{0}", soundSpeed)});
#line 6
  testRunner.When("User sends API request to calculate FIE parameters with following data", ((string)(null)), table1, "When ");
#line 9
  testRunner.Then("FIE parameters are calculated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("02. Verify simple user Flow Induced Turbulence calculation")]
        [NUnit.Framework.TestCaseAttribute("1", "1", "1", "1", "1", "1", "1", "1", "1", "1", null)]
        public virtual void _02_VerifySimpleUserFlowInducedTurbulenceCalculation(string waterFR, string gasFR, string oilFR, string pipeOutsideDiam, string pipeInsideDiam, string pipeLength, string waterDen, string gasDen, string oilDen, string gasVis, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("02. Verify simple user Flow Induced Turbulence calculation", exampleTags);
#line 15
 this.ScenarioSetup(scenarioInfo);
#line 16
  testRunner.Given("Application API is up and running", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "waterFlowRate",
                        "gasFlowRate",
                        "oilFlowRate",
                        "mainPipeOutsideDiameter",
                        "mainPipeInsideDiameter",
                        "mainPipeSpanLength",
                        "waterDensity",
                        "gasDensity",
                        "oilDensity",
                        "gasViscosity"});
            table2.AddRow(new string[] {
                        string.Format("{0}", waterFR),
                        string.Format("{0}", gasFR),
                        string.Format("{0}", oilFR),
                        string.Format("{0}", pipeOutsideDiam),
                        string.Format("{0}", pipeInsideDiam),
                        string.Format("{0}", pipeLength),
                        string.Format("{0}", waterDen),
                        string.Format("{0}", gasDen),
                        string.Format("{0}", oilDen),
                        string.Format("{0}", gasVis)});
#line 17
  testRunner.When("User sends API request to calculate FIT parameters with following data", ((string)(null)), table2, "When ");
#line 20
  testRunner.Then("FIT parameters are calculated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
