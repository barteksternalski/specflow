// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.3.2.0
//      SpecFlow Generator Version:2.3.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace specflowPoC.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.2.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("API integration", Description="  As a User I want to verify API calculations", SourceFile="Features\\IntegrationAPI.feature", SourceLine=0)]
    public partial class APIIntegrationFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "IntegrationAPI.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "API integration", "  As a User I want to verify API calculations", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void _01_VerifySimpleUserFlowInducedExcitationSuccessfulCalculation(string insDiam, string len, string waterFR, string gasFR, string oilFR, string waterDen, string gasDen, string oilDen, string branchID, string gasVis, string soundSpeed, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("01. Verify simple user Flow Induced Excitation successful calculation", exampleTags);
#line 4
 this.ScenarioSetup(scenarioInfo);
#line 5
  testRunner.Given("Application API is up and running", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "insideDiameter",
                        "length",
                        "waterFlowRate",
                        "gasFlowRate",
                        "oilFlowRate",
                        "waterDensity",
                        "gasDensity",
                        "oilDensity",
                        "mainBranchID",
                        "gasViscosity",
                        "speedOfSound"});
            table1.AddRow(new string[] {
                        string.Format("{0}", insDiam),
                        string.Format("{0}", len),
                        string.Format("{0}", waterFR),
                        string.Format("{0}", gasFR),
                        string.Format("{0}", oilFR),
                        string.Format("{0}", waterDen),
                        string.Format("{0}", gasDen),
                        string.Format("{0}", oilDen),
                        string.Format("{0}", branchID),
                        string.Format("{0}", gasVis),
                        string.Format("{0}", soundSpeed)});
#line 6
  testRunner.When("User sends API request to calculate FIE parameters with following data", ((string)(null)), table1, "When ");
#line 9
  testRunner.Then("FIE parameters are calculated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("01. Verify simple user Flow Induced Excitation successful calculation, Variant 0", SourceLine=12)]
        public virtual void _01_VerifySimpleUserFlowInducedExcitationSuccessfulCalculation_Variant0()
        {
#line 4
 this._01_VerifySimpleUserFlowInducedExcitationSuccessfulCalculation("1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("01. Verify simple user Flow Induced Excitation successful calculation, Variant 1", SourceLine=12)]
        public virtual void _01_VerifySimpleUserFlowInducedExcitationSuccessfulCalculation_Variant1()
        {
#line 4
 this._01_VerifySimpleUserFlowInducedExcitationSuccessfulCalculation("0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("01. Verify simple user Flow Induced Excitation successful calculation, Variant 2", SourceLine=12)]
        public virtual void _01_VerifySimpleUserFlowInducedExcitationSuccessfulCalculation_Variant2()
        {
#line 4
 this._01_VerifySimpleUserFlowInducedExcitationSuccessfulCalculation("-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("01. Verify simple user Flow Induced Excitation successful calculation, Variant 3", SourceLine=12)]
        public virtual void _01_VerifySimpleUserFlowInducedExcitationSuccessfulCalculation_Variant3()
        {
#line 4
 this._01_VerifySimpleUserFlowInducedExcitationSuccessfulCalculation("136", "5", "0.001", "0.152", "0", "977", "286", "601", "12", "1", "3800000", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("01. Verify simple user Flow Induced Excitation successful calculation, Variant 4", SourceLine=12)]
        public virtual void _01_VerifySimpleUserFlowInducedExcitationSuccessfulCalculation_Variant4()
        {
#line 4
 this._01_VerifySimpleUserFlowInducedExcitationSuccessfulCalculation("136", "5", "0.001", "0.153", "0", "977", "285", "601", "12", "1", "3800000", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("01. Verify simple user Flow Induced Excitation successful calculation, Variant 5", SourceLine=12)]
        public virtual void _01_VerifySimpleUserFlowInducedExcitationSuccessfulCalculation_Variant5()
        {
#line 4
 this._01_VerifySimpleUserFlowInducedExcitationSuccessfulCalculation("136", "10", "0.001", "0.153", "0", "977", "280", "601", "12", "1", "3800000", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("01. Verify simple user Flow Induced Excitation successful calculation, Variant 6", SourceLine=12)]
        public virtual void _01_VerifySimpleUserFlowInducedExcitationSuccessfulCalculation_Variant6()
        {
#line 4
 this._01_VerifySimpleUserFlowInducedExcitationSuccessfulCalculation("136", "10", "0.001", "0.153", "0", "977", "280", "601", "12", "1", "3800000", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("01. Verify simple user Flow Induced Excitation successful calculation, Variant 7", SourceLine=12)]
        public virtual void _01_VerifySimpleUserFlowInducedExcitationSuccessfulCalculation_Variant7()
        {
#line 4
 this._01_VerifySimpleUserFlowInducedExcitationSuccessfulCalculation("50", "45", "0.09", "0.15", "0.015", "794", "1500", "1500", "20", "1.5", "4200000", ((string[])(null)));
#line hidden
        }
        
        public virtual void _02_VerifySimpleUserFlowInducedTurbulenceSuccessfulCalculation(string waterFR, string gasFR, string oilFR, string pipeOutsideDiam, string pipeInsideDiam, string pipeLength, string waterDen, string gasDen, string oilDen, string gasVis, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("02. Verify simple user Flow Induced Turbulence successful calculation", exampleTags);
#line 22
 this.ScenarioSetup(scenarioInfo);
#line 23
  testRunner.Given("Application API is up and running", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "waterFlowRate",
                        "gasFlowRate",
                        "oilFlowRate",
                        "mainPipeOutsideDiameter",
                        "mainPipeInsideDiameter",
                        "mainPipeSpanLength",
                        "waterDensity",
                        "gasDensity",
                        "oilDensity",
                        "gasViscosity"});
            table2.AddRow(new string[] {
                        string.Format("{0}", waterFR),
                        string.Format("{0}", gasFR),
                        string.Format("{0}", oilFR),
                        string.Format("{0}", pipeOutsideDiam),
                        string.Format("{0}", pipeInsideDiam),
                        string.Format("{0}", pipeLength),
                        string.Format("{0}", waterDen),
                        string.Format("{0}", gasDen),
                        string.Format("{0}", oilDen),
                        string.Format("{0}", gasVis)});
#line 24
  testRunner.When("User sends API request to calculate FIT parameters with following data", ((string)(null)), table2, "When ");
#line 27
  testRunner.Then("FIT parameters are calculated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("02. Verify simple user Flow Induced Turbulence successful calculation, Variant 0", SourceLine=30)]
        public virtual void _02_VerifySimpleUserFlowInducedTurbulenceSuccessfulCalculation_Variant0()
        {
#line 22
 this._02_VerifySimpleUserFlowInducedTurbulenceSuccessfulCalculation("1", "1", "1", "1", "1", "1", "1", "1", "1", "1", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("02. Verify simple user Flow Induced Turbulence successful calculation, Variant 1", SourceLine=30)]
        public virtual void _02_VerifySimpleUserFlowInducedTurbulenceSuccessfulCalculation_Variant1()
        {
#line 22
 this._02_VerifySimpleUserFlowInducedTurbulenceSuccessfulCalculation("0", "0", "0", "0", "0", "0", "0", "0", "0", "0", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("02. Verify simple user Flow Induced Turbulence successful calculation, Variant 2", SourceLine=30)]
        public virtual void _02_VerifySimpleUserFlowInducedTurbulenceSuccessfulCalculation_Variant2()
        {
#line 22
 this._02_VerifySimpleUserFlowInducedTurbulenceSuccessfulCalculation("-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("02. Verify simple user Flow Induced Turbulence successful calculation, Variant 3", SourceLine=30)]
        public virtual void _02_VerifySimpleUserFlowInducedTurbulenceSuccessfulCalculation_Variant3()
        {
#line 22
 this._02_VerifySimpleUserFlowInducedTurbulenceSuccessfulCalculation("0.001", "0.152", "0", "219", "136", "5", "977", "286", "601", "3", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("02. Verify simple user Flow Induced Turbulence successful calculation, Variant 4", SourceLine=30)]
        public virtual void _02_VerifySimpleUserFlowInducedTurbulenceSuccessfulCalculation_Variant4()
        {
#line 22
 this._02_VerifySimpleUserFlowInducedTurbulenceSuccessfulCalculation("0.001", "0.162", "0", "219", "136", "5", "977", "276", "601", "3", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("02. Verify simple user Flow Induced Turbulence successful calculation, Variant 5", SourceLine=30)]
        public virtual void _02_VerifySimpleUserFlowInducedTurbulenceSuccessfulCalculation_Variant5()
        {
#line 22
 this._02_VerifySimpleUserFlowInducedTurbulenceSuccessfulCalculation("0.001", "0.172", "0", "219", "136", "5", "977", "266", "601", "3", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("02. Verify simple user Flow Induced Turbulence successful calculation, Variant 6", SourceLine=30)]
        public virtual void _02_VerifySimpleUserFlowInducedTurbulenceSuccessfulCalculation_Variant6()
        {
#line 22
 this._02_VerifySimpleUserFlowInducedTurbulenceSuccessfulCalculation("0.001", "0.182", "0", "219", "136", "5", "977", "256", "601", "3", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("02. Verify simple user Flow Induced Turbulence successful calculation, Variant 7", SourceLine=30)]
        public virtual void _02_VerifySimpleUserFlowInducedTurbulenceSuccessfulCalculation_Variant7()
        {
#line 22
 this._02_VerifySimpleUserFlowInducedTurbulenceSuccessfulCalculation("0.001", "0.192", "0", "219", "136", "5", "977", "246", "601", "3", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("02. Verify simple user Flow Induced Turbulence successful calculation, Variant 8", SourceLine=30)]
        public virtual void _02_VerifySimpleUserFlowInducedTurbulenceSuccessfulCalculation_Variant8()
        {
#line 22
 this._02_VerifySimpleUserFlowInducedTurbulenceSuccessfulCalculation("0.001", "0.200", "0", "94", "12", "1000", "977", "246", "601", "3", ((string[])(null)));
#line hidden
        }
        
        public virtual void _03_WrongFileUploadVerification(string fileName, string message, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("03. Wrong file upload verification", exampleTags);
#line 41
 this.ScenarioSetup(scenarioInfo);
#line 42
  testRunner.Given("Application API is up and running", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 43
  testRunner.When(string.Format("User sends API request to upload {0} file", fileName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 44
  testRunner.Then(string.Format("Proper error message {0} is returned", message), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("03. Wrong file upload verification, alpaca26kb.jpg", SourceLine=47)]
        public virtual void _03_WrongFileUploadVerification_Alpaca26Kb_Jpg()
        {
#line 41
 this._03_WrongFileUploadVerification("alpaca26kb.jpg", "Invalid PVT file format", ((string[])(null)));
#line hidden
        }
        
        public virtual void _04_UserIsAbleToUploadPVTFile(string fileName, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("04. User is able to upload PVT file", exampleTags);
#line 50
 this.ScenarioSetup(scenarioInfo);
#line 51
  testRunner.Given("Application API is up and running", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 52
  testRunner.When(string.Format("User sends API request to upload {0} file", fileName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 53
  testRunner.Then("File is uploaded", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("04. User is able to upload PVT file, PVT_correctSmall.tab", SourceLine=56)]
        public virtual void _04_UserIsAbleToUploadPVTFile_PVT_CorrectSmall_Tab()
        {
#line 50
 this._04_UserIsAbleToUploadPVTFile("PVT_correctSmall.tab", ((string[])(null)));
#line hidden
        }
        
        public virtual void _05_UserIsAbleToCreateNewProject(string pvtFileName, string name, string desc, string caseNo, string noOfEquip, string noOfSubEquip, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("05. User is able to create new project", exampleTags);
#line 59
 this.ScenarioSetup(scenarioInfo);
#line 60
  testRunner.Given("Application API is up and running", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "fileName",
                        "name",
                        "description",
                        "numberOfCases",
                        "equipments",
                        "subEquipments"});
            table3.AddRow(new string[] {
                        string.Format("{0}", pvtFileName),
                        string.Format("{0}", name),
                        string.Format("{0}", desc),
                        string.Format("{0}", caseNo),
                        string.Format("{0}", noOfEquip),
                        string.Format("{0}", noOfSubEquip)});
#line 61
  testRunner.When("User creates project with given data", ((string)(null)), table3, "When ");
#line 64
  testRunner.Then("Project is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("05. User is able to create new project, PVT_correct.tab", SourceLine=67)]
        public virtual void _05_UserIsAbleToCreateNewProject_PVT_Correct_Tab()
        {
#line 59
 this._05_UserIsAbleToCreateNewProject("PVT_correct.tab", "apiTest", "some description", "100", "2", "2", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("06. User is able to get list of created projects", SourceLine=69)]
        public virtual void _06_UserIsAbleToGetListOfCreatedProjects()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("06. User is able to get list of created projects", ((string[])(null)));
#line 70
 this.ScenarioSetup(scenarioInfo);
#line 71
  testRunner.Given("Application API is up and running", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 72
  testRunner.When("User sends API request to get list of created projects", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 73
  testRunner.Then("List of projects is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("07. User is able to get details of given project", SourceLine=74)]
        public virtual void _07_UserIsAbleToGetDetailsOfGivenProject()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("07. User is able to get details of given project", ((string[])(null)));
#line 75
 this.ScenarioSetup(scenarioInfo);
#line 76
  testRunner.Given("Application API is up and running", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 77
  testRunner.When("User sends API request to get project details", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 78
  testRunner.Then("Project details are returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 79
  testRunner.Then("Project has 2 added equipments", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void _08_UserIsAbleToUpdateAspectsDetailsOfGivenProject(string maxKinEnergy, string maxKinComment, string mod27, string mod27_Comment, string mod29, string mod29_Comment, string mod28, string mod28_Comment, string mod4, string mod4_Comment, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("08. User is able to update aspects details of given project", exampleTags);
#line 81
 this.ScenarioSetup(scenarioInfo);
#line 82
  testRunner.Given("Application API is up and running", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "maxKineticEnergy",
                        "maxKineticEnergyComment",
                        "module2_7Enabled",
                        "module2_7Comment",
                        "module2_9Enabled",
                        "module2_9Comment",
                        "module2_8Enabled",
                        "module2_8Comment",
                        "module4Enabled",
                        "module4Comment"});
            table4.AddRow(new string[] {
                        string.Format("{0}", maxKinEnergy),
                        string.Format("{0}", maxKinComment),
                        string.Format("{0}", mod27),
                        string.Format("{0}", mod27_Comment),
                        string.Format("{0}", mod29),
                        string.Format("{0}", mod29_Comment),
                        string.Format("{0}", mod28),
                        string.Format("{0}", mod28_Comment),
                        string.Format("{0}", mod4),
                        string.Format("{0}", mod4_Comment)});
#line 83
  testRunner.When("User send API request to update aspects details of given project", ((string)(null)), table4, "When ");
#line 86
  testRunner.Then("Aspects details are updated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("08. User is able to update aspects details of given project, 50000", SourceLine=89)]
        public virtual void _08_UserIsAbleToUpdateAspectsDetailsOfGivenProject_50000()
        {
#line 81
 this._08_UserIsAbleToUpdateAspectsDetailsOfGivenProject("50000", "module should be checked", "false", "", "false", "", "false", "", "false", "", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("09. User is able to get aspects details of given project", SourceLine=91)]
        public virtual void _09_UserIsAbleToGetAspectsDetailsOfGivenProject()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("09. User is able to get aspects details of given project", ((string[])(null)));
#line 92
 this.ScenarioSetup(scenarioInfo);
#line 93
  testRunner.Given("Application API is up and running", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 94
  testRunner.When("User send API request to get aspects details of given project", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 95
  testRunner.Then("Aspects details are returned with Max kinetic energy set to 50000.0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("10. User is able to get precalc info about given equipment within created project" +
            "", SourceLine=96)]
        public virtual void _10_UserIsAbleToGetPrecalcInfoAboutGivenEquipmentWithinCreatedProject()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("10. User is able to get precalc info about given equipment within created project" +
                    "", ((string[])(null)));
#line 97
 this.ScenarioSetup(scenarioInfo);
#line 98
  testRunner.Given("Application API is up and running", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 99
  testRunner.When("User sends API request to get precalc info", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 100
  testRunner.Then("Precalc info is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void _11_UserIsAbleToUpdatePrecalcInfoForGivenEquipmentWithinCreatedProject(string gasDensity, string oilDensity, string waterDensity, string press, string temp, string gasRate, string oilRate, string waterRate, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("11. User is able to update precalc info for given equipment within created projec" +
                    "t", exampleTags);
#line 102
 this.ScenarioSetup(scenarioInfo);
#line 103
  testRunner.Given("Application API is up and running", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "standardGasDensity",
                        "standardOilDensity",
                        "standardWaterDensity",
                        "pressure",
                        "temperature",
                        "gasRateAtStandardConditions",
                        "oilRateAtStandardConditions",
                        "waterRateAtStandardConditions"});
            table5.AddRow(new string[] {
                        string.Format("{0}", gasDensity),
                        string.Format("{0}", oilDensity),
                        string.Format("{0}", waterDensity),
                        string.Format("{0}", press),
                        string.Format("{0}", temp),
                        string.Format("{0}", gasRate),
                        string.Format("{0}", oilRate),
                        string.Format("{0}", waterRate)});
#line 104
  testRunner.When("User send API request to update precalc info with given data", ((string)(null)), table5, "When ");
#line 107
  testRunner.Then("Precalc info is updated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("11. User is able to update precalc info for given equipment within created projec" +
            "t, 100.0", SourceLine=110)]
        public virtual void _11_UserIsAbleToUpdatePrecalcInfoForGivenEquipmentWithinCreatedProject_100_0()
        {
#line 102
 this._11_UserIsAbleToUpdatePrecalcInfoForGivenEquipmentWithinCreatedProject("100.0", "123.0", "10.0", "20.1", "123.3", "23.4", "34.5", "34.5", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("12. User is able to get Module-2.2 data for given equipment within created projec" +
            "t", SourceLine=112)]
        public virtual void _12_UserIsAbleToGetModule_2_2DataForGivenEquipmentWithinCreatedProject()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("12. User is able to get Module-2.2 data for given equipment within created projec" +
                    "t", ((string[])(null)));
#line 113
 this.ScenarioSetup(scenarioInfo);
#line 114
  testRunner.Given("Application API is up and running", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 115
  testRunner.When("User sends API request to get Module-2.2 details", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 116
  testRunner.Then("Module-2.2 details are returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void _13_UserIsAbleToUpdateModule2_2DataForGivenEquipmentWithinCreatedProject(string outsideDiameter, string insideDiameter, string length, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("13. User is able to update Module 2.2 data for given equipment within created pro" +
                    "ject", exampleTags);
#line 118
 this.ScenarioSetup(scenarioInfo);
#line 119
  testRunner.Given("Application API is up and running", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "mainPipeOutsideDiameter",
                        "mainPipeInsideDiameter",
                        "mainPipeSpanLength"});
            table6.AddRow(new string[] {
                        string.Format("{0}", outsideDiameter),
                        string.Format("{0}", insideDiameter),
                        string.Format("{0}", length)});
#line 120
  testRunner.When("User sends API request to update Module-2.2 details with given data", ((string)(null)), table6, "When ");
#line 123
  testRunner.Then("Module-2.2 details are updated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("13. User is able to update Module 2.2 data for given equipment within created pro" +
            "ject, 219.1", SourceLine=126)]
        public virtual void _13_UserIsAbleToUpdateModule2_2DataForGivenEquipmentWithinCreatedProject_219_1()
        {
#line 118
 this._13_UserIsAbleToUpdateModule2_2DataForGivenEquipmentWithinCreatedProject("219.1", "136.9", "5.092", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("14. User is able to get Module 2.2 LoF factor for given equipment within created " +
            "project", SourceLine=128)]
        public virtual void _14_UserIsAbleToGetModule2_2LoFFactorForGivenEquipmentWithinCreatedProject()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("14. User is able to get Module 2.2 LoF factor for given equipment within created " +
                    "project", ((string[])(null)));
#line 129
 this.ScenarioSetup(scenarioInfo);
#line 130
  testRunner.Given("Application API is up and running", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 131
  testRunner.When("User sends API request to get Module-2.2 LoF info", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 132
  testRunner.Then("Module-2.2 LoF info is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("15. User is able to get Module-2.6 data for given equipment within created projec" +
            "t", SourceLine=133)]
        public virtual void _15_UserIsAbleToGetModule_2_6DataForGivenEquipmentWithinCreatedProject()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("15. User is able to get Module-2.6 data for given equipment within created projec" +
                    "t", ((string[])(null)));
#line 134
 this.ScenarioSetup(scenarioInfo);
#line 135
  testRunner.Given("Application API is up and running", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 136
  testRunner.When("User sends API request to get Module-2.6 details", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 137
  testRunner.Then("Module-2.6 details are returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void _16_UserIsAbleToUpdateModule2_6DataForGivenEquipmentWithinCreatedProject(string insideDiameter, string length, string mainBranchID, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("16. User is able to update Module 2.6 data for given equipment within created pro" +
                    "ject", exampleTags);
#line 139
 this.ScenarioSetup(scenarioInfo);
#line 140
  testRunner.Given("Application API is up and running", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "insideDiameter",
                        "length",
                        "mainBranchID"});
            table7.AddRow(new string[] {
                        string.Format("{0}", insideDiameter),
                        string.Format("{0}", length),
                        string.Format("{0}", mainBranchID)});
#line 141
  testRunner.When("User sends API request to update Module-2.6 details with given data", ((string)(null)), table7, "When ");
#line 144
  testRunner.Then("Module-2.6 details are updated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("16. User is able to update Module 2.6 data for given equipment within created pro" +
            "ject, 136.9", SourceLine=147)]
        public virtual void _16_UserIsAbleToUpdateModule2_6DataForGivenEquipmentWithinCreatedProject_136_9()
        {
#line 139
 this._16_UserIsAbleToUpdateModule2_6DataForGivenEquipmentWithinCreatedProject("136.9", "5", "11", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("17. User is able to get Module 2.6 LoF factor for given equipment within created " +
            "project", SourceLine=149)]
        public virtual void _17_UserIsAbleToGetModule2_6LoFFactorForGivenEquipmentWithinCreatedProject()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("17. User is able to get Module 2.6 LoF factor for given equipment within created " +
                    "project", ((string[])(null)));
#line 150
 this.ScenarioSetup(scenarioInfo);
#line 151
  testRunner.Given("Application API is up and running", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 152
  testRunner.When("User sends API request to get Module-2.6 LoF info", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 153
  testRunner.Then("Module-2.6 LoF info is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("18. User is able to delete uploaded PVT file", SourceLine=154)]
        public virtual void _18_UserIsAbleToDeleteUploadedPVTFile()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("18. User is able to delete uploaded PVT file", ((string[])(null)));
#line 155
 this.ScenarioSetup(scenarioInfo);
#line 156
  testRunner.Given("Application API is up and running", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 157
  testRunner.When("User sends API request to delete uploaded PVT file", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 158
  testRunner.Then("PVT file is deleted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("19. User is able to delete given project", SourceLine=159)]
        public virtual void _19_UserIsAbleToDeleteGivenProject()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("19. User is able to delete given project", ((string[])(null)));
#line 160
 this.ScenarioSetup(scenarioInfo);
#line 161
  testRunner.Given("Application API is up and running", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 162
  testRunner.When("User sends API request to delete given project", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 163
  testRunner.Then("Project is deleted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
            TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }
    }
}
#pragma warning restore
#endregion
