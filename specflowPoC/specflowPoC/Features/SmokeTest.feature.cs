// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.2.0.0
//      SpecFlow Generator Version:2.2.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace specflowPoC.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Simple browser test")]
    public partial class SimpleBrowserTestFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "SmokeTest.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Simple browser test", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("001. Setup browser")]
        [NUnit.Framework.CategoryAttribute("UISmoke")]
        public virtual void _001_SetupBrowser()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("001. Setup browser", new string[] {
                        "UISmoke"});
#line 4
 this.ScenarioSetup(scenarioInfo);
#line 5
  testRunner.Given("Clear email account", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 6
  testRunner.Given("Generate unique name", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 7
  testRunner.Given("Setup \'Chrome\' browser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("002. User can login")]
        [NUnit.Framework.CategoryAttribute("UISmoke")]
        [NUnit.Framework.TestCaseAttribute("admin.five@csiodev.onmicrosoft.com", "Si3ple9Ass", null)]
        public virtual void _002_UserCanLogin(string login, string password, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "UISmoke"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("002. User can login", @__tags);
#line 10
 this.ScenarioSetup(scenarioInfo);
#line 11
  testRunner.Given("User is on login page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 12
  testRunner.When(string.Format("User enters \'{0}\' and \'{1}\'", login, password), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 13
  testRunner.Then("Main page is displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("003. Successfully create new user")]
        [NUnit.Framework.CategoryAttribute("UISmoke")]
        [NUnit.Framework.TestCaseAttribute("Organization", "baton", "baton", "bartavanade@gmail.com", "{null}", "Carrier", "baton", "TestCarrier", "{null}", "{null}", "Users,Create Single", null)]
        public virtual void _003_SuccessfullyCreateNewUser(string userType, string userId, string name, string email, string orgUserId, string orgType, string csioId, string carrier, string brokerage, string file, string modules, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "UISmoke"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("003. Successfully create new user", @__tags);
#line 20
 this.ScenarioSetup(scenarioInfo);
#line 21
  testRunner.Given("User is on dashboard page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "UserType",
                        "UserId",
                        "UserName",
                        "Email",
                        "OrganizationId",
                        "OrganizationType",
                        "CsioNetId",
                        "Carrier",
                        "Broker",
                        "File",
                        "Modules"});
            table1.AddRow(new string[] {
                        string.Format("{0}", userType),
                        string.Format("{0}", userId),
                        string.Format("{0}", name),
                        string.Format("{0}", email),
                        string.Format("{0}", orgUserId),
                        string.Format("{0}", orgType),
                        string.Format("{0}", csioId),
                        string.Format("{0}", carrier),
                        string.Format("{0}", brokerage),
                        string.Format("{0}", file),
                        string.Format("{0}", modules)});
#line 22
  testRunner.When("User creates new user with given data", ((string)(null)), table1, "When ");
#line 25
  testRunner.Then(string.Format("User \'{0}\' is created", name), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 26
  testRunner.When("User logs out", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("004. Verify user access")]
        [NUnit.Framework.CategoryAttribute("UISmoke")]
        [NUnit.Framework.TestCaseAttribute("baton@csiodev.onmicrosoft.com", "Si3ple9Ass", "Create Single,Drafts,Sent,Create User,User List", "Dashboard,Reporting,Create Bulk,E-mail,E-Slip Back", null)]
        public virtual void _004_VerifyUserAccess(string login, string password, string modulesAvailable, string modulesUnavailable, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "UISmoke"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("004. Verify user access", @__tags);
#line 33
 this.ScenarioSetup(scenarioInfo);
#line 34
  testRunner.Given("User is on login page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 35
  testRunner.When(string.Format("Created user enters \'{0}\' and \'{1}\'", login, password), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 36
  testRunner.Then("Main page is displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 37
  testRunner.Then(string.Format("User has access to \'{0}\' modules", modulesAvailable), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 38
  testRunner.Then(string.Format("User does not have access to \'{0}\' modules", modulesUnavailable), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 39
  testRunner.When("User logs out", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("005. User can login")]
        [NUnit.Framework.CategoryAttribute("UISmoke")]
        [NUnit.Framework.TestCaseAttribute("bartBrokerage@csiodev.onmicrosoft.com", "2@d!tQy4", null)]
        public virtual void _005_UserCanLogin(string login, string password, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "UISmoke"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("005. User can login", @__tags);
#line 46
 this.ScenarioSetup(scenarioInfo);
#line 47
  testRunner.Given("User is on login page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 48
  testRunner.When(string.Format("User enters \'{0}\' and \'{1}\'", login, password), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 49
  testRunner.Then("Main page is displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("006. User is able to fill Customer and Policy Information")]
        [NUnit.Framework.CategoryAttribute("UISmoke")]
        [NUnit.Framework.TestCaseAttribute("banan", "123123123", "bartavanade@gmail.com", "123123123", "English", "Manitoba", "temp1", "temp1", "krk", "30300", "12/12/2020", "12/12/2022", "RSA Canada", "{null}", null)]
        public virtual void _006_UserIsAbleToFillCustomerAndPolicyInformation(string name, string policyNo, string email, string phoneNo, string lang, string province, string address1, string address2, string city, string code, string effDate, string expDate, string insurer, string broker, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "UISmoke"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("006. User is able to fill Customer and Policy Information", @__tags);
#line 56
 this.ScenarioSetup(scenarioInfo);
#line 57
  testRunner.Given("User is creating new eEslip", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "EslipName",
                        "PolicyNumber",
                        "Email",
                        "PhoneNumber",
                        "Language",
                        "Province",
                        "AddressLine1",
                        "AddressLine2",
                        "City",
                        "PostalCode",
                        "EffectiveDate",
                        "ExpirationDate",
                        "Insurer",
                        "Brokerage"});
            table2.AddRow(new string[] {
                        string.Format("{0}", name),
                        string.Format("{0}", policyNo),
                        string.Format("{0}", email),
                        string.Format("{0}", phoneNo),
                        string.Format("{0}", lang),
                        string.Format("{0}", province),
                        string.Format("{0}", address1),
                        string.Format("{0}", address2),
                        string.Format("{0}", city),
                        string.Format("{0}", code),
                        string.Format("{0}", effDate),
                        string.Format("{0}", expDate),
                        string.Format("{0}", insurer),
                        string.Format("{0}", broker)});
#line 58
  testRunner.When("User creates new eSlip with given customer and policy information with given data" +
                    "", ((string)(null)), table2, "When ");
#line 61
  testRunner.When("User saves eSlip draft", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 62
  testRunner.Then(string.Format("ESlip \'{0}\' is displayed on Drafts list", name), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("007. Tear down browser")]
        [NUnit.Framework.CategoryAttribute("UISmoke")]
        public virtual void _007_TearDownBrowser()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("007. Tear down browser", new string[] {
                        "UISmoke"});
#line 69
 this.ScenarioSetup(scenarioInfo);
#line 70
  testRunner.Given("Close browser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
